type anon_class_15_1 = service {
    greet: (text) -> (text) query;
    get_number_of_contracts: () -> (nat64) query;
    add_contract: (text, text, nat64) -> (LResult);
    get_all_contracts: () -> (vec Contract) query;
    transfer: (TransferArgs) -> (LResult);
};

type Contract = record {
    id: nat64;
    timestamp: nat64;
    creator: principal;
    voters: vec principal;
    status: ContractState;
    contract_name: text;
    contract_text: text;
    tokens: nat64;
};

type PrincipalName = text;
type Tokens = nat64;

type Account = record {
    owner: principal;
    tokens: Tokens;
};

type TransferArgs = record {
    to: principal;
    amount: Tokens;
};

type ContractState = variant {
    Open;
    Closed;
    Succeeded;
    Failed: text;
};

type LResult = variant {
    Err: text;
    Ok: text;
};

type TransferResult = variant {
    Err: text;
    Ok: text;
};

type SystemParams = record {
    transfer_fee: Tokens;
    contract_unit: Tokens;
    contract_submission_deposit: Tokens;
};

type MusallStableStorage = record {
    accounts: vec Account;
    contracts: vec Contract;
    system_params: SystemParams;
};

service : () -> anon_class_15_1